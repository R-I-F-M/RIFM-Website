import {
  require_react_is
} from "./chunk-BXMZFTTB.js";
import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-N6MYFXC3.js";

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-particle-effect-button/dist/index.es.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var commonjsGlobal = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}
var anime_min = createCommonjsModule(function(module) {
  var $jscomp = { scope: {} };
  $jscomp.defineProperty = "function" == typeof Object.defineProperties ? Object.defineProperty : function(e, r, p) {
    if (p.get || p.set) throw new TypeError("ES3 does not support getters and setters.");
    e != Array.prototype && e != Object.prototype && (e[r] = p.value);
  };
  $jscomp.getGlobal = function(e) {
    return "undefined" != typeof window && window === e ? e : "undefined" != typeof commonjsGlobal && null != commonjsGlobal ? commonjsGlobal : e;
  };
  $jscomp.global = $jscomp.getGlobal(commonjsGlobal);
  $jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
  $jscomp.initSymbol = function() {
    $jscomp.initSymbol = function() {
    };
    $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
  };
  $jscomp.symbolCounter_ = 0;
  $jscomp.Symbol = function(e) {
    return $jscomp.SYMBOL_PREFIX + (e || "") + $jscomp.symbolCounter_++;
  };
  $jscomp.initSymbolIterator = function() {
    $jscomp.initSymbol();
    var e = $jscomp.global.Symbol.iterator;
    e || (e = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
    "function" != typeof Array.prototype[e] && $jscomp.defineProperty(Array.prototype, e, { configurable: true, writable: true, value: function() {
      return $jscomp.arrayIterator(this);
    } });
    $jscomp.initSymbolIterator = function() {
    };
  };
  $jscomp.arrayIterator = function(e) {
    var r = 0;
    return $jscomp.iteratorPrototype(function() {
      return r < e.length ? { done: false, value: e[r++] } : { done: true };
    });
  };
  $jscomp.iteratorPrototype = function(e) {
    $jscomp.initSymbolIterator();
    e = { next: e };
    e[$jscomp.global.Symbol.iterator] = function() {
      return this;
    };
    return e;
  };
  $jscomp.array = $jscomp.array || {};
  $jscomp.iteratorFromArray = function(e, r) {
    $jscomp.initSymbolIterator();
    e instanceof String && (e += "");
    var p = 0, m = { next: function() {
      if (p < e.length) {
        var u = p++;
        return { value: r(u, e[u]), done: false };
      }
      m.next = function() {
        return { done: true, value: void 0 };
      };
      return m.next();
    } };
    m[Symbol.iterator] = function() {
      return m;
    };
    return m;
  };
  $jscomp.polyfill = function(e, r, p, m) {
    if (r) {
      p = $jscomp.global;
      e = e.split(".");
      for (m = 0; m < e.length - 1; m++) {
        var u = e[m];
        u in p || (p[u] = {});
        p = p[u];
      }
      e = e[e.length - 1];
      m = p[e];
      r = r(m);
      r != m && null != r && $jscomp.defineProperty(p, e, { configurable: true, writable: true, value: r });
    }
  };
  $jscomp.polyfill("Array.prototype.keys", function(e) {
    return e ? e : function() {
      return $jscomp.iteratorFromArray(this, function(e2) {
        return e2;
      });
    };
  }, "es6-impl", "es3");
  var $jscomp$this = commonjsGlobal;
  (function(e, r) {
    false ? (void 0)([], r) : module.exports ? module.exports = r() : e.anime = r();
  })(commonjsGlobal, function() {
    function e(a) {
      if (!h.col(a)) try {
        return document.querySelectorAll(a);
      } catch (c) {
      }
    }
    function r(a, c) {
      for (var d = a.length, b = 2 <= arguments.length ? arguments[1] : void 0, f = [], n = 0; n < d; n++) if (n in a) {
        var k = a[n];
        c.call(b, k, n, a) && f.push(k);
      }
      return f;
    }
    function p(a) {
      return a.reduce(function(a2, d) {
        return a2.concat(h.arr(d) ? p(d) : d);
      }, []);
    }
    function m(a) {
      if (h.arr(a)) return a;
      h.str(a) && (a = e(a) || a);
      return a instanceof NodeList || a instanceof HTMLCollection ? [].slice.call(a) : [a];
    }
    function u(a, c) {
      return a.some(function(a2) {
        return a2 === c;
      });
    }
    function C(a) {
      var c = {}, d;
      for (d in a) c[d] = a[d];
      return c;
    }
    function D(a, c) {
      var d = C(a), b;
      for (b in a) d[b] = c.hasOwnProperty(b) ? c[b] : a[b];
      return d;
    }
    function z(a, c) {
      var d = C(a), b;
      for (b in c) d[b] = h.und(a[b]) ? c[b] : a[b];
      return d;
    }
    function T(a) {
      a = a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(a2, c2, d2, k) {
        return c2 + c2 + d2 + d2 + k + k;
      });
      var c = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);
      a = parseInt(c[1], 16);
      var d = parseInt(c[2], 16), c = parseInt(c[3], 16);
      return "rgba(" + a + "," + d + "," + c + ",1)";
    }
    function U(a) {
      function c(a2, c2, b2) {
        0 > b2 && (b2 += 1);
        1 < b2 && --b2;
        return b2 < 1 / 6 ? a2 + 6 * (c2 - a2) * b2 : 0.5 > b2 ? c2 : b2 < 2 / 3 ? a2 + (c2 - a2) * (2 / 3 - b2) * 6 : a2;
      }
      var d = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(a);
      a = parseInt(d[1]) / 360;
      var b = parseInt(d[2]) / 100, f = parseInt(d[3]) / 100, d = d[4] || 1;
      if (0 == b) f = b = a = f;
      else {
        var n = 0.5 > f ? f * (1 + b) : f + b - f * b, k = 2 * f - n, f = c(k, n, a + 1 / 3), b = c(k, n, a);
        a = c(k, n, a - 1 / 3);
      }
      return "rgba(" + 255 * f + "," + 255 * b + "," + 255 * a + "," + d + ")";
    }
    function y(a) {
      if (a = /([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a)) return a[2];
    }
    function V(a) {
      if (-1 < a.indexOf("translate") || "perspective" === a) return "px";
      if (-1 < a.indexOf("rotate") || -1 < a.indexOf("skew")) return "deg";
    }
    function I(a, c) {
      return h.fnc(a) ? a(c.target, c.id, c.total) : a;
    }
    function E(a, c) {
      if (c in a.style) return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()) || "0";
    }
    function J(a, c) {
      if (h.dom(a) && u(W, c)) return "transform";
      if (h.dom(a) && (a.getAttribute(c) || h.svg(a) && a[c])) return "attribute";
      if (h.dom(a) && "transform" !== c && E(a, c)) return "css";
      if (null != a[c]) return "object";
    }
    function X(a, c) {
      var d = V(c), d = -1 < c.indexOf("scale") ? 1 : 0 + d;
      a = a.style.transform;
      if (!a) return d;
      for (var b = [], f = [], n = [], k = /(\w+)\((.+?)\)/g; b = k.exec(a); ) f.push(b[1]), n.push(b[2]);
      a = r(n, function(a2, b2) {
        return f[b2] === c;
      });
      return a.length ? a[0] : d;
    }
    function K(a, c) {
      switch (J(a, c)) {
        case "transform":
          return X(a, c);
        case "css":
          return E(a, c);
        case "attribute":
          return a.getAttribute(c);
      }
      return a[c] || 0;
    }
    function L(a, c) {
      var d = /^(\*=|\+=|-=)/.exec(a);
      if (!d) return a;
      var b = y(a) || 0;
      c = parseFloat(c);
      a = parseFloat(a.replace(d[0], ""));
      switch (d[0][0]) {
        case "+":
          return c + a + b;
        case "-":
          return c - a + b;
        case "*":
          return c * a + b;
      }
    }
    function F(a, c) {
      return Math.sqrt(Math.pow(c.x - a.x, 2) + Math.pow(c.y - a.y, 2));
    }
    function M(a) {
      a = a.points;
      for (var c = 0, d, b = 0; b < a.numberOfItems; b++) {
        var f = a.getItem(b);
        0 < b && (c += F(d, f));
        d = f;
      }
      return c;
    }
    function N(a) {
      if (a.getTotalLength) return a.getTotalLength();
      switch (a.tagName.toLowerCase()) {
        case "circle":
          return 2 * Math.PI * a.getAttribute("r");
        case "rect":
          return 2 * a.getAttribute("width") + 2 * a.getAttribute("height");
        case "line":
          return F({ x: a.getAttribute("x1"), y: a.getAttribute("y1") }, { x: a.getAttribute("x2"), y: a.getAttribute("y2") });
        case "polyline":
          return M(a);
        case "polygon":
          var c = a.points;
          return M(a) + F(c.getItem(c.numberOfItems - 1), c.getItem(0));
      }
    }
    function Y(a, c) {
      function d(b2) {
        b2 = void 0 === b2 ? 0 : b2;
        return a.el.getPointAtLength(1 <= c + b2 ? c + b2 : 0);
      }
      var b = d(), f = d(-1), n = d(1);
      switch (a.property) {
        case "x":
          return b.x;
        case "y":
          return b.y;
        case "angle":
          return 180 * Math.atan2(n.y - f.y, n.x - f.x) / Math.PI;
      }
    }
    function O(a, c) {
      var d = /-?\d*\.?\d+/g, b;
      b = h.pth(a) ? a.totalLength : a;
      if (h.col(b)) if (h.rgb(b)) {
        var f = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(b);
        b = f ? "rgba(" + f[1] + ",1)" : b;
      } else b = h.hex(b) ? T(b) : h.hsl(b) ? U(b) : void 0;
      else f = (f = y(b)) ? b.substr(0, b.length - f.length) : b, b = c && !/\s/g.test(b) ? f + c : f;
      b += "";
      return { original: b, numbers: b.match(d) ? b.match(d).map(Number) : [0], strings: h.str(a) || c ? b.split(d) : [] };
    }
    function P(a) {
      a = a ? p(h.arr(a) ? a.map(m) : m(a)) : [];
      return r(
        a,
        function(a2, d, b) {
          return b.indexOf(a2) === d;
        }
      );
    }
    function Z(a) {
      var c = P(a);
      return c.map(function(a2, b) {
        return { target: a2, id: b, total: c.length };
      });
    }
    function aa(a, c) {
      var d = C(c);
      if (h.arr(a)) {
        var b = a.length;
        2 !== b || h.obj(a[0]) ? h.fnc(c.duration) || (d.duration = c.duration / b) : a = { value: a };
      }
      return m(a).map(function(a2, b2) {
        b2 = b2 ? 0 : c.delay;
        a2 = h.obj(a2) && !h.pth(a2) ? a2 : { value: a2 };
        h.und(a2.delay) && (a2.delay = b2);
        return a2;
      }).map(function(a2) {
        return z(a2, d);
      });
    }
    function ba(a, c) {
      var d = {}, b;
      for (b in a) {
        var f = I(a[b], c);
        h.arr(f) && (f = f.map(function(a2) {
          return I(
            a2,
            c
          );
        }), 1 === f.length && (f = f[0]));
        d[b] = f;
      }
      d.duration = parseFloat(d.duration);
      d.delay = parseFloat(d.delay);
      return d;
    }
    function ca(a) {
      return h.arr(a) ? A.apply(this, a) : Q[a];
    }
    function da(a, c) {
      var d;
      return a.tweens.map(function(b) {
        b = ba(b, c);
        var f = b.value, e2 = K(c.target, a.name), k = d ? d.to.original : e2, k = h.arr(f) ? f[0] : k, w = L(h.arr(f) ? f[1] : f, k), e2 = y(w) || y(k) || y(e2);
        b.from = O(k, e2);
        b.to = O(w, e2);
        b.start = d ? d.end : a.offset;
        b.end = b.start + b.delay + b.duration;
        b.easing = ca(b.easing);
        b.elasticity = (1e3 - Math.min(Math.max(b.elasticity, 1), 999)) / 1e3;
        b.isPath = h.pth(f);
        b.isColor = h.col(b.from.original);
        b.isColor && (b.round = 1);
        return d = b;
      });
    }
    function ea(a, c) {
      return r(p(a.map(function(a2) {
        return c.map(function(b) {
          var c2 = J(a2.target, b.name);
          if (c2) {
            var d = da(b, a2);
            b = { type: c2, property: b.name, animatable: a2, tweens: d, duration: d[d.length - 1].end, delay: d[0].delay };
          } else b = void 0;
          return b;
        });
      })), function(a2) {
        return !h.und(a2);
      });
    }
    function R(a, c, d, b) {
      var f = "delay" === a;
      return c.length ? (f ? Math.min : Math.max).apply(Math, c.map(function(b2) {
        return b2[a];
      })) : f ? b.delay : d.offset + b.delay + b.duration;
    }
    function fa(a) {
      var c = D(ga, a), d = D(S, a), b = Z(a.targets), f = [], e2 = z(c, d), k;
      for (k in a) e2.hasOwnProperty(k) || "targets" === k || f.push({ name: k, offset: e2.offset, tweens: aa(a[k], d) });
      a = ea(b, f);
      return z(c, { children: [], animatables: b, animations: a, duration: R("duration", a, c, d), delay: R("delay", a, c, d) });
    }
    function q(a) {
      function c() {
        return window.Promise && new Promise(function(a2) {
          return p2 = a2;
        });
      }
      function d(a2) {
        return g.reversed ? g.duration - a2 : a2;
      }
      function b(a2) {
        for (var b2 = 0, c2 = {}, d2 = g.animations, f2 = d2.length; b2 < f2; ) {
          var e3 = d2[b2], k2 = e3.animatable, h3 = e3.tweens, n = h3.length - 1, l2 = h3[n];
          n && (l2 = r(h3, function(b3) {
            return a2 < b3.end;
          })[0] || l2);
          for (var h3 = Math.min(Math.max(a2 - l2.start - l2.delay, 0), l2.duration) / l2.duration, w = isNaN(h3) ? 1 : l2.easing(h3, l2.elasticity), h3 = l2.to.strings, p3 = l2.round, n = [], m3 = void 0, m3 = l2.to.numbers.length, t2 = 0; t2 < m3; t2++) {
            var x = void 0, x = l2.to.numbers[t2], q2 = l2.from.numbers[t2], x = l2.isPath ? Y(l2.value, w * x) : q2 + w * (x - q2);
            p3 && (l2.isColor && 2 < t2 || (x = Math.round(x * p3) / p3));
            n.push(x);
          }
          if (l2 = h3.length) for (m3 = h3[0], w = 0; w < l2; w++) p3 = h3[w + 1], t2 = n[w], isNaN(t2) || (m3 = p3 ? m3 + (t2 + p3) : m3 + (t2 + " "));
          else m3 = n[0];
          ha[e3.type](k2.target, e3.property, m3, c2, k2.id);
          e3.currentValue = m3;
          b2++;
        }
        if (b2 = Object.keys(c2).length) for (d2 = 0; d2 < b2; d2++) H || (H = E(document.body, "transform") ? "transform" : "-webkit-transform"), g.animatables[d2].target.style[H] = c2[d2].join(" ");
        g.currentTime = a2;
        g.progress = a2 / g.duration * 100;
      }
      function f(a2) {
        if (g[a2]) g[a2](g);
      }
      function e2() {
        g.remaining && true !== g.remaining && g.remaining--;
      }
      function k(a2) {
        var k2 = g.duration, n = g.offset, w = n + g.delay, r2 = g.currentTime, x = g.reversed, q2 = d(a2);
        if (g.children.length) {
          var u2 = g.children, v2 = u2.length;
          if (q2 >= g.currentTime) for (var G = 0; G < v2; G++) u2[G].seek(q2);
          else for (; v2--; ) u2[v2].seek(q2);
        }
        if (q2 >= w || !k2) g.began || (g.began = true, f("begin")), f("run");
        if (q2 > n && q2 < k2) b(q2);
        else if (q2 <= n && 0 !== r2 && (b(0), x && e2()), q2 >= k2 && r2 !== k2 || !k2) b(k2), x || e2();
        f("update");
        a2 >= k2 && (g.remaining ? (t = h2, "alternate" === g.direction && (g.reversed = !g.reversed)) : (g.pause(), g.completed || (g.completed = true, f("complete"), "Promise" in window && (p2(), m2 = c()))), l = 0);
      }
      a = void 0 === a ? {} : a;
      var h2, t, l = 0, p2 = null, m2 = c(), g = fa(a);
      g.reset = function() {
        var a2 = g.direction, c2 = g.loop;
        g.currentTime = 0;
        g.progress = 0;
        g.paused = true;
        g.began = false;
        g.completed = false;
        g.reversed = "reverse" === a2;
        g.remaining = "alternate" === a2 && 1 === c2 ? 2 : c2;
        b(0);
        for (a2 = g.children.length; a2--; ) g.children[a2].reset();
      };
      g.tick = function(a2) {
        h2 = a2;
        t || (t = h2);
        k((l + h2 - t) * q.speed);
      };
      g.seek = function(a2) {
        k(d(a2));
      };
      g.pause = function() {
        var a2 = v.indexOf(g);
        -1 < a2 && v.splice(a2, 1);
        g.paused = true;
      };
      g.play = function() {
        g.paused && (g.paused = false, t = 0, l = d(g.currentTime), v.push(g), B || ia());
      };
      g.reverse = function() {
        g.reversed = !g.reversed;
        t = 0;
        l = d(g.currentTime);
      };
      g.restart = function() {
        g.pause();
        g.reset();
        g.play();
      };
      g.finished = m2;
      g.reset();
      g.autoplay && g.play();
      return g;
    }
    var ga = { update: void 0, begin: void 0, run: void 0, complete: void 0, loop: 1, direction: "normal", autoplay: true, offset: 0 }, S = { duration: 1e3, delay: 0, easing: "easeOutElastic", elasticity: 500, round: 0 }, W = "translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective".split(" "), H, h = {
      arr: function(a) {
        return Array.isArray(a);
      },
      obj: function(a) {
        return -1 < Object.prototype.toString.call(a).indexOf("Object");
      },
      pth: function(a) {
        return h.obj(a) && a.hasOwnProperty("totalLength");
      },
      svg: function(a) {
        return a instanceof SVGElement;
      },
      dom: function(a) {
        return a.nodeType || h.svg(a);
      },
      str: function(a) {
        return "string" === typeof a;
      },
      fnc: function(a) {
        return "function" === typeof a;
      },
      und: function(a) {
        return "undefined" === typeof a;
      },
      hex: function(a) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a);
      },
      rgb: function(a) {
        return /^rgb/.test(a);
      },
      hsl: function(a) {
        return /^hsl/.test(a);
      },
      col: function(a) {
        return h.hex(a) || h.rgb(a) || h.hsl(a);
      }
    }, A = /* @__PURE__ */ function() {
      function a(a2, d, b) {
        return (((1 - 3 * b + 3 * d) * a2 + (3 * b - 6 * d)) * a2 + 3 * d) * a2;
      }
      return function(c, d, b, f) {
        if (0 <= c && 1 >= c && 0 <= b && 1 >= b) {
          var e2 = new Float32Array(11);
          if (c !== d || b !== f) for (var k = 0; 11 > k; ++k) e2[k] = a(0.1 * k, c, b);
          return function(k2) {
            if (c === d && b === f) return k2;
            if (0 === k2) return 0;
            if (1 === k2) return 1;
            for (var h2 = 0, l = 1; 10 !== l && e2[l] <= k2; ++l) h2 += 0.1;
            --l;
            var l = h2 + (k2 - e2[l]) / (e2[l + 1] - e2[l]) * 0.1, n = 3 * (1 - 3 * b + 3 * c) * l * l + 2 * (3 * b - 6 * c) * l + 3 * c;
            if (1e-3 <= n) {
              for (h2 = 0; 4 > h2; ++h2) {
                n = 3 * (1 - 3 * b + 3 * c) * l * l + 2 * (3 * b - 6 * c) * l + 3 * c;
                if (0 === n) break;
                var m2 = a(l, c, b) - k2, l = l - m2 / n;
              }
              k2 = l;
            } else if (0 === n) k2 = l;
            else {
              var l = h2, h2 = h2 + 0.1, g = 0;
              do
                m2 = l + (h2 - l) / 2, n = a(m2, c, b) - k2, 0 < n ? h2 = m2 : l = m2;
              while (1e-7 < Math.abs(n) && 10 > ++g);
              k2 = m2;
            }
            return a(k2, d, f);
          };
        }
      };
    }(), Q = function() {
      function a(a2, b2) {
        return 0 === a2 || 1 === a2 ? a2 : -Math.pow(2, 10 * (a2 - 1)) * Math.sin(2 * (a2 - 1 - b2 / (2 * Math.PI) * Math.asin(1)) * Math.PI / b2);
      }
      var c = "Quad Cubic Quart Quint Sine Expo Circ Back Elastic".split(" "), d = { In: [[0.55, 0.085, 0.68, 0.53], [0.55, 0.055, 0.675, 0.19], [0.895, 0.03, 0.685, 0.22], [0.755, 0.05, 0.855, 0.06], [0.47, 0, 0.745, 0.715], [0.95, 0.05, 0.795, 0.035], [0.6, 0.04, 0.98, 0.335], [0.6, -0.28, 0.735, 0.045], a], Out: [[
        0.25,
        0.46,
        0.45,
        0.94
      ], [0.215, 0.61, 0.355, 1], [0.165, 0.84, 0.44, 1], [0.23, 1, 0.32, 1], [0.39, 0.575, 0.565, 1], [0.19, 1, 0.22, 1], [0.075, 0.82, 0.165, 1], [0.175, 0.885, 0.32, 1.275], function(b2, c2) {
        return 1 - a(1 - b2, c2);
      }], InOut: [[0.455, 0.03, 0.515, 0.955], [0.645, 0.045, 0.355, 1], [0.77, 0, 0.175, 1], [0.86, 0, 0.07, 1], [0.445, 0.05, 0.55, 0.95], [1, 0, 0, 1], [0.785, 0.135, 0.15, 0.86], [0.68, -0.55, 0.265, 1.55], function(b2, c2) {
        return 0.5 > b2 ? a(2 * b2, c2) / 2 : 1 - a(-2 * b2 + 2, c2) / 2;
      }] }, b = { linear: A(0.25, 0.25, 0.75, 0.75) }, f = {}, e2;
      for (e2 in d) f.type = e2, d[f.type].forEach(/* @__PURE__ */ function(a2) {
        return function(d2, f2) {
          b["ease" + a2.type + c[f2]] = h.fnc(d2) ? d2 : A.apply($jscomp$this, d2);
        };
      }(f)), f = { type: f.type };
      return b;
    }(), ha = { css: function(a, c, d) {
      return a.style[c] = d;
    }, attribute: function(a, c, d) {
      return a.setAttribute(c, d);
    }, object: function(a, c, d) {
      return a[c] = d;
    }, transform: function(a, c, d, b, f) {
      b[f] || (b[f] = []);
      b[f].push(c + "(" + d + ")");
    } }, v = [], B = 0, ia = /* @__PURE__ */ function() {
      function a() {
        B = requestAnimationFrame(c);
      }
      function c(c2) {
        var b = v.length;
        if (b) {
          for (var d = 0; d < b; ) v[d] && v[d].tick(c2), d++;
          a();
        } else cancelAnimationFrame(B), B = 0;
      }
      return a;
    }();
    q.version = "2.2.0";
    q.speed = 1;
    q.running = v;
    q.remove = function(a) {
      a = P(a);
      for (var c = v.length; c--; ) for (var d = v[c], b = d.animations, f = b.length; f--; ) u(a, b[f].animatable.target) && (b.splice(f, 1), b.length || d.pause());
    };
    q.getValue = K;
    q.path = function(a, c) {
      var d = h.str(a) ? e(a)[0] : a, b = c || 100;
      return function(a2) {
        return { el: d, property: a2, totalLength: N(d) * (b / 100) };
      };
    };
    q.setDashoffset = function(a) {
      var c = N(a);
      a.setAttribute("stroke-dasharray", c);
      return c;
    };
    q.bezier = A;
    q.easings = Q;
    q.timeline = function(a) {
      var c = q(a);
      c.pause();
      c.duration = 0;
      c.add = function(d) {
        c.children.forEach(function(a2) {
          a2.began = true;
          a2.completed = true;
        });
        m(d).forEach(function(b) {
          var d2 = z(b, D(S, a || {}));
          d2.targets = d2.targets || a.targets;
          b = c.duration;
          var e2 = d2.offset;
          d2.autoplay = false;
          d2.direction = c.direction;
          d2.offset = h.und(e2) ? b : L(e2, b);
          c.began = true;
          c.completed = true;
          c.seek(d2.offset);
          d2 = q(d2);
          d2.began = true;
          d2.completed = true;
          d2.duration > b && (c.duration = d2.duration);
          c.children.push(d2);
        });
        c.seek(0);
        c.reset();
        c.autoplay && c.restart();
        return c;
      };
      return c;
    };
    q.random = function(a, c) {
      return Math.floor(Math.random() * (c - a + 1)) + a;
    };
    return q;
  });
});
var classnames = createCommonjsModule(function(module) {
  (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
        var argType = typeof arg;
        if (argType === "string" || argType === "number") {
          classes.push(arg);
        } else if (Array.isArray(arg)) {
          classes.push(classNames.apply(null, arg));
        } else if (argType === "object") {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
      return classes.join(" ");
    }
    if (module.exports) {
      module.exports = classNames;
    } else if (false) {
      (void 0)("classnames", [], function() {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  })();
});
var performanceNow = createCommonjsModule(function(module) {
  (function() {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      module.exports = function() {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      module.exports = function() {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      module.exports = function() {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      module.exports = function() {
        return (/* @__PURE__ */ new Date()).getTime() - loadTime;
      };
      loadTime = (/* @__PURE__ */ new Date()).getTime();
    }
  }).call(commonjsGlobal);
});
var root = typeof window === "undefined" ? commonjsGlobal : window;
var vendors = ["moz", "webkit"];
var suffix = "AnimationFrame";
var raf = root["request" + suffix];
var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
for (i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + "Request" + suffix];
  caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
}
var i;
if (!raf || !caf) {
  last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
  raf = function(callback) {
    if (queue.length === 0) {
      var _now = performanceNow(), next = Math.max(0, frameDuration - (_now - last));
      last = next + _now;
      setTimeout(function() {
        var cp = queue.slice(0);
        queue.length = 0;
        for (var i = 0; i < cp.length; i++) {
          if (!cp[i].cancelled) {
            try {
              cp[i].callback(last);
            } catch (e) {
              setTimeout(function() {
                throw e;
              }, 0);
            }
          }
        }
      }, Math.round(next));
    }
    queue.push({
      handle: ++id,
      callback,
      cancelled: false
    });
    return id;
  };
  caf = function(handle) {
    for (var i = 0; i < queue.length; i++) {
      if (queue[i].handle === handle) {
        queue[i].cancelled = true;
      }
    }
  };
}
var last;
var id;
var queue;
var frameDuration;
var raf_1 = function(fn) {
  return raf.call(root, fn);
};
var cancel = function() {
  caf.apply(root, arguments);
};
var polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf;
  object.cancelAnimationFrame = caf;
};
raf_1.cancel = cancel;
raf_1.polyfill = polyfill;
function styleInject(css2, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (!css2 || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css2;
  } else {
    style.appendChild(document.createTextNode(css2));
  }
}
var css = ".styles_particles__5dxGv {\n	position: relative;\n  display: inline-block;\n}\n\n.styles_wrapper__3KXDn {\n  position: relative;\n  display: inline-block;\n  overflow: hidden;\n}\n\n.styles_content__1Phom:focus,\n.styles_content__1Phom > *:focus {\n  outline: none;\n}\n\n.styles_canvas__1krxf {\n	position: absolute;\n	top: 50%;\n	left: 50%;\n	transform: translate3d(-50%, -50%, 0);\n	pointer-events: none;\n}\n";
var styles = { "particles": "styles_particles__5dxGv", "wrapper": "styles_wrapper__3KXDn", "content": "styles_content__1Phom", "canvas": "styles_canvas__1krxf" };
styleInject(css);
var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = /* @__PURE__ */ function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var inherits = function(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};
var possibleConstructorReturn = function(self2, call) {
  if (!self2) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self2;
};
var noop = function noop2() {
};
var ParticleEffectButton = function(_Component) {
  inherits(ParticleEffectButton2, _Component);
  function ParticleEffectButton2() {
    var _ref;
    var _temp, _this, _ret;
    classCallCheck(this, ParticleEffectButton2);
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParticleEffectButton2.__proto__ || Object.getPrototypeOf(ParticleEffectButton2)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      status: _this.props.hidden ? "hidden" : "normal",
      progress: 0
    }, _this._rect = {
      width: 0,
      height: 0
    }, _this._canvasRef = function(ref) {
      _this._canvas = ref;
    }, _this._wrapperRef = function(ref) {
      _this._wrapper = ref;
    }, _this._startAnimation = function() {
      if (!_this._canvas || !_this._wrapper) return;
      var _this$props = _this.props, duration = _this$props.duration, easing = _this$props.easing, canvasPadding = _this$props.canvasPadding, onBegin = _this$props.onBegin;
      var status = _this.state.status;
      if (status === "hiding") {
        _this._progress = 0;
      } else {
        _this._progress = 1;
      }
      _this._particles = [];
      _this._rect = _this._wrapper.getBoundingClientRect();
      _this._canvas.width = _this._rect.width + canvasPadding * 2;
      _this._canvas.height = _this._rect.height + canvasPadding * 2;
      _this._ctx = _this._canvas.getContext("2d");
      anime_min({
        targets: { value: status === "hiding" ? 0 : 100 },
        value: status === "hiding" ? 100 : 0,
        duration,
        easing,
        begin: onBegin,
        update: function update(anim) {
          var value = anim.animatables[0].target.value;
          setTimeout(function() {
            _this.setState({ progress: value });
          });
          if (duration) {
            _this._addParticles(value / 100);
          }
        }
      });
    }, _this._loop = function() {
      _this._updateParticles();
      _this._renderParticles();
      if (_this._particles.length) {
        _this._raf = raf_1(_this._loop);
      } else {
        _this._raf = null;
        _this._cycleStatus();
        _this.props.onComplete();
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }
  createClass(ParticleEffectButton2, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(props) {
      if (props.hidden !== this.props.hidden) {
        var status = this.state.status;
        if (status === "normal" && props.hidden) {
          this.setState({ status: "hiding" }, this._startAnimation);
        } else if (status === "hidden" && !props.hidden) {
          this.setState({ status: "showing" }, this._startAnimation);
        } else if (status === "hiding" && !props.hidden) {
        } else if (status === "showing" && props.hidden) {
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props, children = _props.children, className = _props.className, direction = _props.direction;
      var _state = this.state, status = _state.status, progress = _state.progress;
      var wrapperStyles = {};
      var contentStyles = {};
      var canvasStyles = {};
      if (status === "hiding" || status === "showing") {
        var prop = this._isHorizontal() ? "translateX" : "translateY";
        var size2 = this._isHorizontal() ? this._rect.width : this._rect.height;
        var value = direction === "left" || direction === "top" ? progress : -progress;
        var px = Math.ceil(size2 * value / 100);
        wrapperStyles.transform = prop + "(" + px + "px)";
        contentStyles.transform = prop + "(" + -px + "px)";
      } else if (status === "hidden") {
        wrapperStyles.visibility = "hidden";
        canvasStyles.visibility = "hidden";
      } else if (status === "normal") {
        canvasStyles.visibility = "hidden";
      }
      return import_react.default.createElement(
        "div",
        { className: classnames(styles.particles, className) },
        import_react.default.createElement(
          "div",
          {
            className: styles.wrapper,
            style: wrapperStyles,
            ref: this._wrapperRef
          },
          import_react.default.createElement(
            "div",
            {
              className: styles.content,
              style: contentStyles
            },
            children
          )
        ),
        import_react.default.createElement("canvas", {
          className: styles.canvas,
          ref: this._canvasRef,
          style: canvasStyles
        })
      );
    }
  }, {
    key: "_cycleStatus",
    value: function _cycleStatus() {
      var status = this.state.status;
      if (status === "normal") {
        this.setState({ status: "hiding" });
      } else if (status === "hidden") {
        this.setState({ status: "showing" });
      } else if (status === "hiding") {
        this.setState({ status: "hidden" });
      } else if (status === "showing") {
        this.setState({ status: "normal" });
      }
    }
  }, {
    key: "_addParticles",
    value: function _addParticles(progress) {
      var _props2 = this.props, canvasPadding = _props2.canvasPadding, direction = _props2.direction, particlesAmountCoefficient = _props2.particlesAmountCoefficient;
      var status = this.state.status;
      var _rect = this._rect, width = _rect.width, height = _rect.height;
      var delta = status === "hiding" ? progress - this._progress : this._progress - progress;
      var isHorizontal = this._isHorizontal();
      var progressValue = (isHorizontal ? width : height) * progress + delta * (status === "hiding" ? 100 : 220);
      this._progress = progress;
      var x = canvasPadding;
      var y = canvasPadding;
      if (isHorizontal) {
        x += direction === "left" ? progressValue : width - progressValue;
      } else {
        y += direction === "top" ? progressValue : height - progressValue;
      }
      var i = Math.floor(particlesAmountCoefficient * (delta * 100 + 1));
      if (i > 0) {
        while (i--) {
          this._addParticle({
            x: x + (isHorizontal ? 0 : width * Math.random()),
            y: y + (isHorizontal ? height * Math.random() : 0)
          });
        }
      }
      if (!this._raf) {
        this._raf = raf_1(this._loop);
      }
    }
  }, {
    key: "_addParticle",
    value: function _addParticle(opts) {
      var _props3 = this.props, duration = _props3.duration, size2 = _props3.size, speed2 = _props3.speed;
      var status = this.state.status;
      var frames = duration * 60 / 1e3;
      var _speed = isFunc(speed2) ? speed2() : speed2;
      var _size = isFunc(size2) ? size2() : size2;
      this._particles.push({
        startX: opts.x,
        startY: opts.y,
        x: status === "hiding" ? 0 : _speed * -frames,
        y: 0,
        angle: rand(360),
        counter: status === "hiding" ? 0 : frames,
        increase: Math.PI * 2 / 100,
        life: 0,
        death: status === "hiding" ? frames - 20 + Math.random() * 40 : frames,
        speed: _speed,
        size: _size
      });
    }
  }, {
    key: "_updateParticles",
    value: function _updateParticles() {
      var oscillationCoefficient = this.props.oscillationCoefficient;
      var status = this.state.status;
      for (var i = 0; i < this._particles.length; i++) {
        var p = this._particles[i];
        if (p.life > p.death) {
          this._particles.splice(i, 1);
        } else {
          p.x += p.speed;
          p.y = oscillationCoefficient * Math.sin(p.counter * p.increase);
          p.life++;
          p.counter += status === "hiding" ? 1 : -1;
        }
      }
    }
  }, {
    key: "_renderParticles",
    value: function _renderParticles() {
      var _props4 = this.props, color = _props4.color, type = _props4.type, style = _props4.style;
      var status = this.state.status;
      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
      this._ctx.fillStyle = this._ctx.strokeStyle = color;
      for (var i = 0; i < this._particles.length; ++i) {
        var p = this._particles[i];
        if (p.life < p.death) {
          this._ctx.translate(p.startX, p.startY);
          this._ctx.rotate(p.angle * Math.PI / 180);
          this._ctx.globalAlpha = status === "hiding" ? 1 - p.life / p.death : p.life / p.death;
          this._ctx.beginPath();
          if (type === "circle") {
            this._ctx.arc(p.x, p.y, p.size, 0, 2 * Math.PI);
          } else if (type === "triangle") {
            this._ctx.moveTo(p.x, p.y);
            this._ctx.lineTo(p.x + p.size, p.y + p.size);
            this._ctx.lineTo(p.x + p.size, p.y - p.size);
          } else if (type === "rectangle") {
            this._ctx.rect(p.x, p.y, p.size, p.size);
          }
          if (style === "fill") {
            this._ctx.fill();
          } else if (style === "stroke") {
            this._ctx.closePath();
            this._ctx.stroke();
          }
          this._ctx.globalAlpha = 1;
          this._ctx.rotate(-p.angle * Math.PI / 180);
          this._ctx.translate(-p.startX, -p.startY);
        }
      }
    }
  }, {
    key: "_isHorizontal",
    value: function _isHorizontal() {
      return this.props.direction === "left" || this.props.direction === "right";
    }
  }]);
  return ParticleEffectButton2;
}(import_react.Component);
ParticleEffectButton.propTypes = {
  hidden: import_prop_types.default.bool,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  duration: import_prop_types.default.number,
  easing: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.number)]),
  type: import_prop_types.default.oneOf(["circle", "rectangle", "triangle"]),
  style: import_prop_types.default.oneOf(["fill", "stroke"]),
  direction: import_prop_types.default.oneOf(["left", "right", "top", "bottom"]),
  canvasPadding: import_prop_types.default.number,
  size: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  speed: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  color: import_prop_types.default.string,
  particlesAmountCoefficient: import_prop_types.default.number,
  oscillationCoefficient: import_prop_types.default.number,
  onBegin: import_prop_types.default.func,
  onComplete: import_prop_types.default.func
};
ParticleEffectButton.defaultProps = {
  hidden: false,
  duration: 1e3,
  easing: "easeInOutCubic",
  type: "circle",
  style: "fill",
  direction: "left",
  canvasPadding: 150,
  size: function size() {
    return Math.floor(Math.random() * 3 + 1);
  },
  speed: function speed() {
    return rand(4);
  },
  color: "#000",
  particlesAmountCoefficient: 3,
  oscillationCoefficient: 20,
  onBegin: noop,
  onComplete: noop
};
function rand(value) {
  return Math.random() * value - value / 2;
}
function isFunc(value) {
  return typeof value === "function";
}
var index_es_default = ParticleEffectButton;
export {
  index_es_default as default
};
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-particle-effect-button/dist/index.es.js:
  (*!
    Copyright (c) 2016 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-particle-effect-button.js.map
